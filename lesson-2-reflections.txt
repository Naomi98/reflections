What happens when you initialize a repository? Why do you need to do it?
	Whenever a repository is initialised then a hidden file named .git is added
	to its content. This is needed as it marks that it is a repository instead 
	of any other directory. 
	
How is the staging area different from the working directory and the repository?
What value do you think it offers?
	Staging area is an intermediate area within Git that contains those files
	which will be included when we make a commit. While working directory and
	repository consists of all the files we have. It helps in understanding the 
	working of the version control.
	
How can you use the staging area to make sure you have one commit per logical
change?
	Whenever changes are made in a file and before they are committed, these 
	changes are shown and reflected in the staging area.
	
What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	Sometimes we don't want the changes in difeferent versions to be linear. This
	means that a new change must always be over the previous one. In this case, 
	branches are used as they help in creating a new path for a different version.
	That is the commits for a particular version may be different from the commits 
	in the other version. Though they could have some common commits as well. This
	helps in taking risks and making some experimental changes as well which may 
	not always work as expected.
	There could be many types of branches to work on and it helps especially when
	a project is shared publicly. There is one master branch that is production
	quality branch that always works and never breaks. There is a development 
	branch in which the active work goes on. then there are experimental branch 
	and unique feature branches that you totally expect to break. Theese are not 
	production quality yet.

How do the diagrams help you visualize the branch structure?
	These diagrams show how a new or any branch branched out of the master branch 
	that we were following on. Also, it shows the commits that were made in each
	of the branches. 
	
What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
	By merging the two branches together, we get a new branch which we have made 
	the master branch. This branch consists of all the commits in the previous
	branches combined. The diagram helps in identifying the path of merging and 
	to know the parents of the commits involved.
	
What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
	The pros of automatic merging is that the merging takes place by itself without
	involving the user. However, sometimes, this may lead to few merges that were
	not meant to be. The disadvantage of manual merging is that it can get a lot 
	annoying if we have to resolve the conflicts by ourselves each time. This could
	be a wastage of time and efforts. But it may also improve accuracy as no merges 
	will take place that ae not desired. Also, some conflicts are to be resolved 
	manually only so this helps in that case.
	
Git commands and concepts used upto this lesson:
In Windows, there is a tool in command prompt called FC (File compare) that is used to 
compare two files.
In Linux and Mac, the tool is called Diff (difference)

Ex:
>FC favapp-old.html favapp-new.html (used in Windows command prompt)
$diff -u favapp-old.html favapp-new.html (used in Linux, Mac or GitBash)

$git log – to display what commits have been made
$git log –stat – it is used for more statistics like number of insertions and deletions

$git clone <url of the repository> – it clones a repository from GitHub or any other repository
on your own system into your system

$git checkout – it is used to go back to any previous version of the file.
$git init – it initializes or creates a new git repository

.git – this is a hidden file that indicates that the following directory is a repository and 
is present in it but not visible unless listed using the command “ls –a”
$git status – it shows which files have changed since the last commit

Staging area – add files from the working directory here one at a time and then when we are 
ready to commit then Git bundles the entire content of Staging area into a single commit and
add it to the repository. 
$git add <filename> – add files to the staging area

$git commit 
$git commit –m “Commit message”

$git diff id1 id2 – to check the difference between any two commits
$git diff (with no arguments) – compare the working directory with staging area. Changes made 
which haven’t been added to the staging area yet.
$git diff –staged – this is to show the difference between the staging area and the most 
recent commit
$git reset –hard – it discards any changes in the working directory or the staging area 
(irreversible since none of these have been committed so they can’t be recovered again)

$git branch (with no arguments) – view branches
$git branch branch-name – create new branch with that name
$git checkout branch-name – used to switch to the new branch created

$git checkout –b new-branch-name – this command is equivalent to $git branch new-branch-name
and then $git checkout new-branch-name combined.

Remote branch – I didn’t create it myself, some other collaborator did.
$git log –graph –oneline master coins – this is used to display the branch structure

Merging two branches
$git merge master coins – it is used to merge the mentioned branches into one

$git show commit id – this shows the changes made in this commit by comparing it with its 
parent commit without actually adding the parent ID.

$git branch –d coins – this is used to delete a branch
